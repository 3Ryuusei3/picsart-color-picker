import Head from "next/head";
import { useRef, useState } from 'react';

import { useWindowResize } from "@/hooks/useWindowResize";
import { useImageUpload } from "@/hooks/useImageUpload";
import { useColorDropper } from "@/hooks/useColorDropper";
import { useTrackCursor } from "@/hooks/useTrackCursor";

import SelectedColorIcon from "@/components/Icons/selectedColorIcon";
import ColorPickerIcon from "@/components/Icons/colorPickerIcon";
import getContrastColor from "@/utils/getContrastColor";

export default function Home() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const cursorRef = useRef<HTMLDivElement>(null);
  const [imageData, setImageData] = useState<ImageData | null>(null);

  const color = useColorDropper(canvasRef, cursorRef);
  useTrackCursor(canvasRef, cursorRef);

  const { fileInputRef, handleSettingsClick, handleFileChange } = useImageUpload();
  useWindowResize(canvasRef, setImageData);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="page-container">
        <div className="canvas-container">
          <canvas
            ref={canvasRef}
            width={1280}
            height={720}
          />
          <div className="color-drop__cursor" ref={cursorRef} >
            <div className="color-drop__tag" style={{ ["--px-color" as string]: color, color: getContrastColor(color) }}>{color.toUpperCase()}</div>
            <SelectedColorIcon fill={color} />
          </div>
        </div>
        <div className="controls__container">
          <div className="btn-icon">
            <ColorPickerIcon fill={color} />
          </div>
          <div className="btn" onClick={handleSettingsClick}>
            Upload file
            <input
              type="file"
              accept="image/*"
              style={{ display: 'none' }}
              ref={fileInputRef}
              onChange={handleFileChange(canvasRef)}
            />
          </div>
        </div>
      </div>
    </>
  );
}
